// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VTS.DAL;

namespace VTS.Web.Migrations
{
    [DbContext(typeof(VTSDbContext))]
    [Migration("20210522114313_AddedSeedData")]
    partial class AddedSeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("VTS.DAL.Entities.Clerk", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadId")
                        .IsUnique();

                    b.ToTable("Clerks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeadId = 1
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ManagerId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ManagerId = 1,
                            UserId = 2
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.Head", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Heads");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.Holiday", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<long>("Hours")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SubmissionTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Holidays");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2ac054d6-8508-4daf-e348-08d91b0fb7e6"),
                            Category = "PaidDayOffs",
                            Description = "Mind refresh",
                            Expires = new DateTime(2021, 5, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hours = 24L,
                            Start = new DateTime(2021, 5, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubmissionTime = new DateTime(2021, 5, 22, 14, 43, 12, 622, DateTimeKind.Local).AddTicks(7924),
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("c6e7762b-ec65-42c3-e349-08d91b0fb7e6"),
                            Category = "UnPaidSickness",
                            Description = "Flu",
                            Expires = new DateTime(2021, 5, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hours = 72L,
                            Start = new DateTime(2021, 5, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubmissionTime = new DateTime(2021, 5, 22, 14, 43, 12, 622, DateTimeKind.Local).AddTicks(8067),
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("389da9dc-7bdd-43ad-80ab-08d91c73789f"),
                            Category = "PaidSickness",
                            Description = "Flu",
                            Expires = new DateTime(2021, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hours = 48L,
                            Start = new DateTime(2021, 5, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubmissionTime = new DateTime(2021, 5, 22, 14, 43, 12, 622, DateTimeKind.Local).AddTicks(8081),
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("1aafbbf1-0261-4522-8267-d6ae96e9fbcb"),
                            Category = "UnPaidDayOffs",
                            Description = "Mind refresh",
                            Expires = new DateTime(2021, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hours = 24L,
                            Start = new DateTime(2021, 5, 24, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubmissionTime = new DateTime(2021, 5, 22, 14, 43, 12, 622, DateTimeKind.Local).AddTicks(8091),
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("7e99ea45-e7ef-464a-a779-75c636d90bfb"),
                            Category = "PaidDayOffs",
                            Description = "Mind refresh",
                            Expires = new DateTime(2021, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Hours = 72L,
                            Start = new DateTime(2021, 5, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SubmissionTime = new DateTime(2021, 5, 22, 14, 43, 12, 622, DateTimeKind.Local).AddTicks(8099),
                            UserId = 3
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.HolidayAcception", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<int?>("HeadId")
                        .HasColumnType("int");

                    b.Property<Guid>("HolidayId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.HasIndex("HolidayId")
                        .IsUnique();

                    b.ToTable("HolidaysAcception");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8a26335-2787-4b15-a58d-a37615df7db9"),
                            Description = "Have a good time :)",
                            HeadId = 1,
                            HolidayId = new Guid("2ac054d6-8508-4daf-e348-08d91b0fb7e6"),
                            Status = "Canceled"
                        },
                        new
                        {
                            Id = new Guid("ab62af14-f0b9-4f94-b3e4-c5be891c34c0"),
                            Description = "Wish you good health :)",
                            HeadId = 1,
                            HolidayId = new Guid("c6e7762b-ec65-42c3-e349-08d91b0fb7e6"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("f4f57284-e130-4de4-8c8d-1a8cfe9ba952"),
                            Description = "Wish you good health :)",
                            HeadId = 1,
                            HolidayId = new Guid("389da9dc-7bdd-43ad-80ab-08d91c73789f"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("004db92b-d619-4b41-a0c1-8aa858f11511"),
                            Description = "Have a good time :)",
                            HeadId = 1,
                            HolidayId = new Guid("1aafbbf1-0261-4522-8267-d6ae96e9fbcb"),
                            Status = "Approved"
                        },
                        new
                        {
                            Id = new Guid("4da2f382-87c2-4623-b7ce-91a117606b7f"),
                            Description = "Have a good time :)",
                            HeadId = 1,
                            HolidayId = new Guid("7e99ea45-e7ef-464a-a779-75c636d90bfb"),
                            Status = "Approved"
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.Manager", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("HeadId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("HeadId")
                        .IsUnique();

                    b.ToTable("Managers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            HeadId = 2
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "bordun@gmail.com",
                            FirstName = "Mykhailo",
                            LastName = "Bordun",
                            Role = "Clerk"
                        },
                        new
                        {
                            Id = 2,
                            Email = "bordun@gmail.com",
                            FirstName = "Joe",
                            LastName = "Doe",
                            Role = "Employee"
                        },
                        new
                        {
                            Id = 3,
                            Email = "payne@gmail.com",
                            FirstName = "Max",
                            LastName = "Payne",
                            Role = "Manager"
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.UserVacationInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("BonusPaidDayOffs")
                        .HasColumnType("bigint");

                    b.Property<long>("PaidDayOffs")
                        .HasColumnType("bigint");

                    b.Property<long>("PaidSickness")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartedWorking")
                        .HasColumnType("datetime2");

                    b.Property<long>("UnPaidDayOffs")
                        .HasColumnType("bigint");

                    b.Property<long>("UnPaidSickness")
                        .HasColumnType("bigint");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UsersVacationInfo");

                    b.HasData(
                        new
                        {
                            Id = new Guid("709596dd-bd7c-4c7c-8865-7a4f1cf30c20"),
                            BonusPaidDayOffs = 0L,
                            PaidDayOffs = 15L,
                            PaidSickness = 15L,
                            StartedWorking = new DateTime(2020, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnPaidDayOffs = 15L,
                            UnPaidSickness = 15L,
                            UserId = 1
                        },
                        new
                        {
                            Id = new Guid("4b619e29-8648-4b3b-938a-261f11d0fa98"),
                            BonusPaidDayOffs = 0L,
                            PaidDayOffs = 15L,
                            PaidSickness = 15L,
                            StartedWorking = new DateTime(2020, 11, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnPaidDayOffs = 15L,
                            UnPaidSickness = 15L,
                            UserId = 2
                        },
                        new
                        {
                            Id = new Guid("b7054959-eb96-44f5-b618-a23ee5a05e32"),
                            BonusPaidDayOffs = 0L,
                            PaidDayOffs = 15L,
                            PaidSickness = 15L,
                            StartedWorking = new DateTime(2021, 2, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            UnPaidDayOffs = 15L,
                            UnPaidSickness = 15L,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("VTS.DAL.Entities.Clerk", b =>
                {
                    b.HasOne("VTS.DAL.Entities.Head", "Head")
                        .WithOne("Clerk")
                        .HasForeignKey("VTS.DAL.Entities.Clerk", "HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.Employee", b =>
                {
                    b.HasOne("VTS.DAL.Entities.Manager", "Manager")
                        .WithMany("Subordinates")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("VTS.DAL.Entities.User", "User")
                        .WithOne("Employee")
                        .HasForeignKey("VTS.DAL.Entities.Employee", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.Head", b =>
                {
                    b.HasOne("VTS.DAL.Entities.User", "User")
                        .WithOne("Head")
                        .HasForeignKey("VTS.DAL.Entities.Head", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.Holiday", b =>
                {
                    b.HasOne("VTS.DAL.Entities.User", "User")
                        .WithMany("Holidays")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.HolidayAcception", b =>
                {
                    b.HasOne("VTS.DAL.Entities.Head", "Head")
                        .WithMany("HolidayAcception")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("VTS.DAL.Entities.Holiday", "Holiday")
                        .WithOne("HolidayAcception")
                        .HasForeignKey("VTS.DAL.Entities.HolidayAcception", "HolidayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.Manager", b =>
                {
                    b.HasOne("VTS.DAL.Entities.Head", "Head")
                        .WithOne("Manager")
                        .HasForeignKey("VTS.DAL.Entities.Manager", "HeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("VTS.DAL.Entities.UserVacationInfo", b =>
                {
                    b.HasOne("VTS.DAL.Entities.User", "User")
                        .WithOne("UserVacationInfo")
                        .HasForeignKey("VTS.DAL.Entities.UserVacationInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
